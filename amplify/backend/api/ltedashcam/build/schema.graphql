type demoTable {
  id: ID!
  video_file_name: String!
  dashcam_name: String
  file_location: String
  number_plate: String
  latitude: Float
  longitude: Float
  postcode: String
  video_start_time: String
  video_end_time: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDemoTableConnection {
  items: [demoTable]!
  nextToken: String
}

input ModelDemoTableFilterInput {
  id: ModelIDInput
  video_file_name: ModelStringInput
  dashcam_name: ModelStringInput
  file_location: ModelStringInput
  number_plate: ModelStringInput
  latitude: ModelFloatInput
  longitude: ModelFloatInput
  postcode: ModelStringInput
  video_start_time: ModelStringInput
  video_end_time: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDemoTableFilterInput]
  or: [ModelDemoTableFilterInput]
  not: ModelDemoTableFilterInput
}

type Query {
  getDemoTable(id: ID!): demoTable
  listDemoTables(filter: ModelDemoTableFilterInput, limit: Int, nextToken: String): ModelDemoTableConnection
}

input ModelDemoTableConditionInput {
  video_file_name: ModelStringInput
  dashcam_name: ModelStringInput
  file_location: ModelStringInput
  number_plate: ModelStringInput
  latitude: ModelFloatInput
  longitude: ModelFloatInput
  postcode: ModelStringInput
  video_start_time: ModelStringInput
  video_end_time: ModelStringInput
  and: [ModelDemoTableConditionInput]
  or: [ModelDemoTableConditionInput]
  not: ModelDemoTableConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateDemoTableInput {
  id: ID
  video_file_name: String!
  dashcam_name: String
  file_location: String
  number_plate: String
  latitude: Float
  longitude: Float
  postcode: String
  video_start_time: String
  video_end_time: String
}

input UpdateDemoTableInput {
  id: ID!
  video_file_name: String
  dashcam_name: String
  file_location: String
  number_plate: String
  latitude: Float
  longitude: Float
  postcode: String
  video_start_time: String
  video_end_time: String
}

input DeleteDemoTableInput {
  id: ID!
}

type Mutation {
  createDemoTable(input: CreateDemoTableInput!, condition: ModelDemoTableConditionInput): demoTable
  updateDemoTable(input: UpdateDemoTableInput!, condition: ModelDemoTableConditionInput): demoTable
  deleteDemoTable(input: DeleteDemoTableInput!, condition: ModelDemoTableConditionInput): demoTable
}

input ModelSubscriptionDemoTableFilterInput {
  id: ModelSubscriptionIDInput
  video_file_name: ModelSubscriptionStringInput
  dashcam_name: ModelSubscriptionStringInput
  file_location: ModelSubscriptionStringInput
  number_plate: ModelSubscriptionStringInput
  latitude: ModelSubscriptionFloatInput
  longitude: ModelSubscriptionFloatInput
  postcode: ModelSubscriptionStringInput
  video_start_time: ModelSubscriptionStringInput
  video_end_time: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDemoTableFilterInput]
  or: [ModelSubscriptionDemoTableFilterInput]
}

type Subscription {
  onCreateDemoTable(filter: ModelSubscriptionDemoTableFilterInput): demoTable @aws_subscribe(mutations: ["createDemoTable"])
  onUpdateDemoTable(filter: ModelSubscriptionDemoTableFilterInput): demoTable @aws_subscribe(mutations: ["updateDemoTable"])
  onDeleteDemoTable(filter: ModelSubscriptionDemoTableFilterInput): demoTable @aws_subscribe(mutations: ["deleteDemoTable"])
}
